// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"queue-manager/internal"
	"queue-manager/internal/controllers"
	"queue-manager/internal/providers"
	"queue-manager/internal/queues"
	"queue-manager/internal/structures"
	"queue-manager/internal/tcp"
)

// Injectors from injectors.go:

func InitApp(cfg *structures.CliFlags) (*internal.App, error) {
	queueManagerInterface := queues.NewQueueManager()
	config, err := providers.NewConfigProvider(cfg)
	if err != nil {
		return nil, err
	}
	logger, err := providers.NewLogProvider(config)
	if err != nil {
		return nil, err
	}
	apiController := controllers.NewApiController(queueManagerInterface, logger)
	compressorInterface := queues.NewZstdCompressor()
	queueIOManagerInterface := queues.NewQueueIOManager(compressorInterface)
	schedulerInterface := queues.NewScheduler(queueIOManagerInterface, queueManagerInterface, config, logger)
	tcpServer := tcp.NewTcpServer(config, logger)
	adminController := controllers.NewAdminController(logger, config)
	routerProviderInterface := internal.InitRoutes(apiController, adminController, config)
	app, err := internal.NewApp(apiController, schedulerInterface, tcpServer, config, logger, routerProviderInterface)
	if err != nil {
		return nil, err
	}
	return app, nil
}
